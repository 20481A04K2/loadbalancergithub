steps:
  # Step 0: Generate dynamic version
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Generate Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION_TAG="v-$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $VERSION_TAG"

  # Step 1: Check/create Artifact Registry
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud artifacts repositories describe vamsi-zip-repo --location=asia-east1 --project=enhub-cloud-interns; then
          gcloud artifacts repositories create vamsi-zip-repo \
            --repository-format=generic \
            --location=asia-east1 \
            --project=enhub-cloud-interns
        else
          echo "Repository already exists."
        fi

  # Step 2: Download ZIP from GitHub
  - name: 'gcr.io/cloud-builders/curl'
    id: 'Download ZIP from GitHub'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        curl -L https://github.com/20481A04K2/cloudbuildzipfile/archive/refs/heads/main.zip -o source.zip

  # Step 3: Authenticate with service account
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Authenticate'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        gsutil cp gs://vamsi-artifact-bucket/enhub-cloud-interns-004fbd59b047.json /workspace/key.json
        gcloud auth activate-service-account --key-file=/workspace/key.json

  # Step 4: Show ZIP file size
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Show ZIP File Size'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        du -sh source.zip

  # Step 5: Upload ZIP to Artifact Registry
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Upload to Artifact Registry'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        gcloud artifacts generic upload \
          --project="enhub-cloud-interns" \
          --location="asia-east1" \
          --repository="vamsi-zip-repo" \
          --package="source-package" \
          --version="$VERSION_TAG" \
          --source="source.zip"

  # Step 6: Create a new instance template (versioned)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create Instance Template'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        TEMPLATE_NAME="vamsi-template-$VERSION_TAG"
        gcloud compute instance-templates create $TEMPLATE_NAME \
          --machine-type=e2-micro \
          --region=asia-east1 \
          --tags=allow-8080 \
          --metadata=startup-script='#! /bin/bash
            apt-get update
            apt-get install -y unzip python3-pip
            curl -o /tmp/source.zip https://artifactregistry.googleapis.com/v1/projects/enhub-cloud-interns/locations/asia-east1/repositories/vamsi-zip-repo/packages/source-package/versions/'"$VERSION_TAG"'/source.zip
            unzip /tmp/source.zip -d /home/sajja_vamsi/my-app
            cd /home/sajja_vamsi/my-app/cloudbuildzipfile-main
            pip3 install flask
            nohup python3 app.py > /home/sajja_vamsi/flask.log 2>&1 &'

  # Step 7: Update MIG to use new template
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Update MIG'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        TEMPLATE_NAME="vamsi-template-$VERSION_TAG"
        gcloud compute instance-groups managed set-instance-template vamsi-mig \
          --template=$TEMPLATE_NAME \
          --zone=asia-east1-b

  # Step 8: Update firewall (no-op if exists)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Firewall'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute firewall-rules describe allow-8080; then
          gcloud compute firewall-rules create allow-8080 \
            --allow tcp:8080 \
            --target-tags=allow-8080 \
            --description="Allow TCP port 8080" \
            --direction=INGRESS
        else
          echo "Firewall rule already exists"
        fi

  # Step 9: Create health check (using root path)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Health Check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute health-checks describe vamsi-health-check --region=asia-east1; then
          gcloud compute health-checks create http vamsi-health-check \
            --region=asia-east1 \
            --port=8080 \
            --request-path="/" \
            --check-interval=15s \
            --timeout=10s \
            --healthy-threshold=2 \
            --unhealthy-threshold=3
        else
          echo "Health check already exists"
        fi

options:
  logging: CLOUD_LOGGING_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET

substitutions:
  _UNUSED: "unused"

steps:
  # Step 0: Generate dynamic version tag
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Generate Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION_TAG="v-$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $$VERSION_TAG"

  # Step 1: Check/create Artifact Registry
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud artifacts repositories describe vamsi-zip-repo --location=asia-east1 --project=enhub-cloud-interns; then
          gcloud artifacts repositories create vamsi-zip-repo \
            --repository-format=generic \
            --location=asia-east1 \
            --project=enhub-cloud-interns
        fi

  # Step 2: Download ZIP file from GitHub
  - name: 'gcr.io/cloud-builders/curl'
    id: 'Download ZIP from GitHub'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        curl -L https://github.com/20481A04K2/loadbalancergithub/archive/refs/heads/main.zip -o source.zip

  # Step 3: Authenticate with Google Cloud
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Authenticate'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        gsutil cp gs://vamsi-artifact-bucket/enhub-cloud-interns-004fbd59b047.json /workspace/key.json
        gcloud auth activate-service-account --key-file=/workspace/key.json

  # Step 4: Show ZIP file size
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Show ZIP File Size'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        du -sh source.zip

  # Step 5: Upload ZIP to Artifact Registry
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Upload to Artifact Registry'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        gcloud artifacts generic upload \
          --project="enhub-cloud-interns" \
          --location="asia-east1" \
          --repository="vamsi-zip-repo" \
          --package="source-package" \
          --version="$$VERSION_TAG" \
          --source="source.zip"

  # Step 6: Create Instance Template (Regional)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create Instance Template'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        gcloud compute instance-templates create vamsi-template-$$VERSION_TAG \
          --machine-type=e2-medium \
          --region=asia-east1 \
          --image-family=debian-12 \
          --image-project=debian-cloud \
          --tags=http-server,https-server,allow-8080 \
          --metadata=startup-script='#!/bin/bash
          echo "Startup script started."
          apt-get update -y
          apt-get install -y unzip curl python3-pip python3.11-venv
          mkdir -p /home/sajja_vamsi/my-app
          chown -R sajja_vamsi:sajja_vamsi /home/sajja_vamsi/my-app
          cd /home/sajja_vamsi/my-app
          echo "Downloading ZIP..."
          curl -L https://github.com/20481A04K2/loadbalancergithub/archive/refs/heads/main.zip -o source.zip
          echo "Unzipping..."
          unzip source.zip -d .
          cd loadbalancergithub-main || exit
          python3 -m venv venv
          source venv/bin/activate
          pip install flask
          nohup python3 app.py --host=0.0.0.0 --port=8080 > /home/sajja_vamsi/app.log 2>&1 &
          echo "Startup script completed."'

  # Step 7: Create/Update Regional MIG
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create or Update MIG'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        if ! gcloud compute instance-groups managed describe vamsi-mig --region=asia-east1 > /dev/null 2>&1; then
          gcloud compute instance-groups managed create vamsi-mig \
            --region=asia-east1 \
            --template=vamsi-template-$$VERSION_TAG \
            --size=1 \
            --instance-distribution-policy-zones=asia-east1-b,asia-east1-c \
            --initial-delay=180s
        else
          gcloud compute instance-groups managed set-instance-template vamsi-mig \
            --region=asia-east1 \
            --template=vamsi-template-$$VERSION_TAG
          gcloud compute instance-groups managed rolling-action restart vamsi-mig \
            --region=asia-east1
        fi

  # Step 8: Create firewall rule (if not exists)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Firewall'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute firewall-rules describe allow-8080 --project=enhub-cloud-interns > /dev/null 2>&1; then
          gcloud compute firewall-rules create allow-8080 \
            --allow tcp:8080 \
            --target-tags=allow-8080 \
            --direction=INGRESS \
            --priority=1000 \
            --project=enhub-cloud-interns
        fi

  # Step 9: Create health check (only if it doesn't exist)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Health Check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute health-checks describe vamsi-health-check --project=enhub-cloud-interns > /dev/null 2>&1; then
          echo "Creating health check..."
          gcloud compute health-checks create http vamsi-health-check \
            --project=enhub-cloud-interns \
            --port=8080 \
            --request-path="/" \
            --check-interval=15s \
            --timeout=10s \
            --healthy-threshold=2 \
            --unhealthy-threshold=3
        else
          echo "Health check already exists. Skipping creation."
        fi


  # Step 10: Attach health check to MIG (regional)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Autohealing'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute instance-groups managed update vamsi-mig \
          --region=asia-east1 \
          --health-check=vamsi-health-check \
          --initial-delay=300s \
          --project=enhub-cloud-interns

  # Step 11: Enable autoscaling
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Enable Autoscaling'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute instance-groups managed set-autoscaling vamsi-mig \
          --region=asia-east1 \
          --min-num-replicas=1 \
          --max-num-replicas=5 \
          --target-cpu-utilization=0.60 \
          --cool-down-period=60s \
          --project=enhub-cloud-interns

options:
  logging: CLOUD_LOGGING_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET

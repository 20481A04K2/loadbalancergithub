steps:
  # Step 0: Generate dynamic version tag
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Generate Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION_TAG="v-$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $$VERSION_TAG"

  # Step 1: Check or create Artifact Registry
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud artifacts repositories describe vamsi-zip-repo --location=asia-east1 --project=enhub-cloud-interns; then
          gcloud artifacts repositories create vamsi-zip-repo \
            --repository-format=generic \
            --location=asia-east1 \
            --project=enhub-cloud-interns
        else
          echo "Repository already exists."
        fi

  # Step 2: Download ZIP from GitHub
  - name: 'gcr.io/cloud-builders/curl'
    id: 'Download ZIP from GitHub'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        curl -L https://github.com/20481A04K2/cloudbuildzipfile/archive/refs/heads/main.zip -o source.zip

  # Step 3: Authenticate service account
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Authenticate'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        gsutil cp gs://vamsi-artifact-bucket/enhub-cloud-interns-004fbd59b047.json /workspace/key.json
        gcloud auth activate-service-account --key-file=/workspace/key.json

  # Step 4: Show file size
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Show ZIP Size'
    entrypoint: '/bin/sh'
    args:
      - '-c'
      - |
        du -sh source.zip

  # Step 5: Upload to Artifact Registry
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Upload ZIP'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        echo "Uploading source.zip as version $$VERSION_TAG"
        gcloud artifacts generic upload \
          --project="enhub-cloud-interns" \
          --location="asia-east1" \
          --repository="vamsi-zip-repo" \
          --package="source-package" \
          --version="$$VERSION_TAG" \
          --source="source.zip"

  # Step 6: Create Instance Template with improved startup script
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create Instance Template'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        gcloud compute instance-templates create vamsi-template-$$VERSION_TAG \
          --machine-type=e2-micro \
          --tags=allow-8080 \
          --region=asia-east1 \
          --metadata=startup-script='#! /bin/bash
            exec > /var/log/startup-script.log 2>&1
            echo "Startup script started."
            apt-get update -y
            apt-get install -y unzip python3-pip curl
            mkdir -p /home/sajja_vamsi
            cd /home/sajja_vamsi

            # Install gcloud CLI
            curl -sSL https://sdk.cloud.google.com | bash
            exec -l $SHELL
            source ~/.bashrc
            gcloud components install --quiet
            gcloud auth activate-service-account --key-file=/etc/gce-ssh-keys/key.json

            # Download from Artifact Registry
            gcloud artifacts files download source-package@$$VERSION_TAG \
              --project=enhub-cloud-interns \
              --location=asia-east1 \
              --repository=vamsi-zip-repo \
              --destination=source.zip

            unzip -o source.zip -d my-app
            cd my-app/* || exit 1
            pip3 install flask
            nohup python3 app.py > /home/sajja_vamsi/flask.log 2>&1 & disown
            echo "Flask app started."'

  # Step 7: Create or update MIG
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create or Update MIG'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        if ! gcloud compute instance-groups managed describe vamsi-mig --zone=asia-east1-b > /dev/null 2>&1; then
          gcloud compute instance-groups managed create vamsi-mig \
            --base-instance-name=vamsi-instance \
            --template=vamsi-template-$$VERSION_TAG \
            --size=1 \
            --zone=asia-east1-b \
            --initial-delay=60s
        else
          gcloud compute instance-groups managed set-instance-template vamsi-mig \
            --template=vamsi-template-$$VERSION_TAG \
            --zone=asia-east1-b

  # Step 8: Create firewall rule if not exists
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Firewall'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute firewall-rules describe allow-8080 --project=enhub-cloud-interns > /dev/null 2>&1; then
          gcloud compute firewall-rules create allow-8080 \
            --allow tcp:8080 \
            --target-tags=allow-8080 \
            --direction=INGRESS \
            --priority=1000 \
            --project=enhub-cloud-interns
        fi

  # Step 9: Create health check (if not exists)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Health Check'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud compute health-checks describe vamsi-health-check --region=asia-east1 > /dev/null 2>&1; then
          gcloud compute health-checks create http vamsi-health-check \
            --region=asia-east1 \
            --port=8080 \
            --request-path="/" \
            --check-interval=5s \
            --timeout=5s \
            --healthy-threshold=2 \
            --unhealthy-threshold=2 \
            --project=enhub-cloud-interns
        fi

  # Step 10: Attach health check for autohealing
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Autohealing'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud compute instance-groups managed update vamsi-mig \
          --zone=asia-east1-b \
          --health-check=vamsi-health-check \
          --initial-delay=60s \
          --project=enhub-cloud-interns

  # Step 11: Enable autoscaling
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Enable Autoscaling'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if gcloud compute instance-groups managed describe vamsi-mig --zone=asia-east1-b > /dev/null 2>&1; then
          gcloud compute instance-groups managed set-autoscaling vamsi-mig \
            --zone=asia-east1-b \
            --min-num-replicas=1 \
            --max-num-replicas=5 \
            --target-cpu-utilization=0.01 \
            --cool-down-period=60s \
            --project=enhub-cloud-interns
        else
          echo "MIG not found; skipping autoscaling."
        fi

options:
  logging: CLOUD_LOGGING_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
